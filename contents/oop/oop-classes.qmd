# Class Syntax

I'll provide you with a comprehensive comparison of class syntax across TypeScript, C#, and Python. Let's explore each aspect systematically with code examples and diagrams.

## Basic Class Structure & Initialization

::: {.panel-tabset}
#### TS

```typescript
class Person {
    // Instance properties
    public name: string;
    private age: number;
    protected id: string;
    
    // Class (static) property
    static species: string = "Homo sapiens";
    
    // Constructor
    constructor(name: string, age: number) {
        this.name = name;
        this.age = age;
        this.id = this.generateId();
    }
    
    private generateId(): string {
        return Math.random().toString();
    }
}

// Instantiation
const person = new Person("Alice", 30);
```

#### C#

```csharp
public class Person
{
    // Instance properties (with auto-properties)
    public string Name { get; set; }
    private int age;
    protected string Id { get; set; }
    
    // Class (static) property
    public static string Species { get; set; } = "Homo sapiens";
    
    // Constructor
    public Person(string name, int age)
    {
        Name = name;
        this.age = age;
        Id = GenerateId();
    }
    
    private string GenerateId()
    {
        return Guid.NewGuid().ToString();
    }
}

// Instantiation
var person = new Person("Alice", 30);
```

#### Python

```python
class Person:
    # Class variable
    species = "Homo sapiens"
    
    def __init__(self, name, age):
        # Instance variables
        self.name = name        # Public
        self._id = self._generate_id()  # Protected (convention)
        self.__age = age        # Private (name mangling)
    
    def _generate_id(self):
        import uuid
        return str(uuid.uuid4())

# Instantiation
person = Person("Alice", 30)
```

:::


## Instance vs Class Members

Here's a visual representation:

```
┌─────────────────────────────────────┐
│            CLASS                     │
│  ┌─────────────────────────────┐    │
│  │   Static/Class Members      │    │
│  │   - Shared by all instances │    │
│  └─────────────────────────────┘    │
│                                      │
│  ┌──────────┐  ┌──────────┐        │
│  │Instance 1│  │Instance 2│  ...    │
│  │ - name   │  │ - name   │        │
│  │ - age    │  │ - age    │        │
│  └──────────┘  └──────────┘        │
└─────────────────────────────────────┘
```

::: {.panel-tabset}
#### TS

```typescript
class Counter {
    // Instance property
    private count: number = 0;
    
    // Static property
    static totalCounters: number = 0;
    
    constructor() {
        Counter.totalCounters++;
    }
    
    // Instance method
    increment(): void {
        this.count++;
    }
    
    // Static method
    static getTotalCounters(): number {
        return Counter.totalCounters;
    }
}
```

#### C#

```csharp
public class Counter
{
    // Instance field
    private int count = 0;
    
    // Static field
    private static int totalCounters = 0;
    
    // Instance property
    public int Count => count;
    
    // Static property
    public static int TotalCounters => totalCounters;
    
    public Counter()
    {
        totalCounters++;
    }
    
    // Instance method
    public void Increment()
    {
        count++;
    }
    
    // Static method
    public static void ResetTotal()
    {
        totalCounters = 0;
    }
}
```

#### Python

```python
class Counter:
    # Class variable
    total_counters = 0
    
    def __init__(self):
        # Instance variable
        self.count = 0
        Counter.total_counters += 1
    
    # Instance method
    def increment(self):
        self.count += 1
    
    # Class method
    @classmethod
    def get_total_counters(cls):
        return cls.total_counters
    
    # Static method (no access to cls or self)
    @staticmethod
    def validate_count(value):
        return value >= 0
```

:::


## Access Modifiers Comparison

| Language   | Public | Private | Protected | Package/Internal |
|------------|--------|---------|-----------|------------------|
| TypeScript | public (default for members) | private | protected | - |
| C#         | public | private (default) | protected | internal |
| Python     | name | __name (name mangling) | _name (convention) | - |

::: {.panel-tabset}
#### TS

```typescript
class BankAccount {
    public accountHolder: string;
    private balance: number;
    protected accountNumber: string;
    
    constructor(holder: string, initial: number) {
        this.accountHolder = holder;
        this.balance = initial;
        this.accountNumber = this.generateAccountNumber();
    }
    
    protected generateAccountNumber(): string {
        return "ACC" + Date.now();
    }
    
    public getBalance(): number {
        return this.balance;
    }
}
```

#### C#

```csharp
public class BankAccount
{
    public string AccountHolder { get; set; }
    private decimal balance;
    protected string AccountNumber { get; set; }
    internal string BranchCode { get; set; }  // Accessible within assembly
    
    public BankAccount(string holder, decimal initial)
    {
        AccountHolder = holder;
        balance = initial;
        AccountNumber = GenerateAccountNumber();
    }
    
    protected virtual string GenerateAccountNumber()
    {
        return "ACC" + DateTime.Now.Ticks;
    }
    
    public decimal GetBalance()
    {
        return balance;
    }
}
```

#### Python

```python
class BankAccount:
    def __init__(self, holder, initial):
        self.account_holder = holder      # Public
        self.__balance = initial          # Private (name mangled)
        self._account_number = self._generate_account_number()  # Protected
    
    def _generate_account_number(self):  # Protected method
        import time
        return f"ACC{int(time.time())}"
    
    def get_balance(self):  # Public method
        return self.__balance
    
    def __validate(self):  # Private method
        return self.__balance >= 0
```
:::


## Inheritance

```
        ┌──────────────┐
        │  BaseClass   │
        │  (Parent)    │
        └──────┬───────┘
               │ extends/inherits
        ┌──────▼───────┐
        │ DerivedClass │
        │   (Child)    │
        └──────────────┘
```

::: {.panel-tabset}
#### TS


```typescript
// Base class
class Animal {
    protected name: string;
    
    constructor(name: string) {
        this.name = name;
    }
    
    move(distance: number): void {
        console.log(`${this.name} moved ${distance}m`);
    }
}

// Derived class
class Dog extends Animal {
    private breed: string;
    
    constructor(name: string, breed: string) {
        super(name);  // Call parent constructor
        this.breed = breed;
    }
    
    bark(): void {
        console.log("Woof!");
    }
    
    // Override parent method
    move(distance: number): void {
        console.log("Running...");
        super.move(distance);
    }
}
```

#### C#

```csharp
// Base class
public class Animal
{
    protected string name;
    
    public Animal(string name)
    {
        this.name = name;
    }
    
    public virtual void Move(int distance)
    {
        Console.WriteLine($"{name} moved {distance}m");
    }
}

// Derived class
public class Dog : Animal
{
    private string breed;
    
    public Dog(string name, string breed) : base(name)
    {
        this.breed = breed;
    }
    
    public void Bark()
    {
        Console.WriteLine("Woof!");
    }
    
    // Override parent method
    public override void Move(int distance)
    {
        Console.WriteLine("Running...");
        base.Move(distance);
    }
}
```

#### Python

```python
# Base class
class Animal:
    def __init__(self, name):
        self._name = name  # Protected
    
    def move(self, distance):
        print(f"{self._name} moved {distance}m")

# Derived class
class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name)  # Call parent constructor
        self.__breed = breed    # Private
    
    def bark(self):
        print("Woof!")
    
    # Override parent method
    def move(self, distance):
        print("Running...")
        super().move(distance)

# Multiple inheritance (Python only)
class SwimmingMixin:
    def swim(self):
        print("Swimming...")

class Duck(Animal, SwimmingMixin):
    pass
```
:::


## Interfaces & Abstract Classes

::: {.panel-tabset}
#### TS

```typescript
// Interface
interface Flyable {
    altitude: number;
    fly(): void;
}

interface Swimmable {
    swim(): void;
}

// Abstract class
abstract class Bird {
    abstract makeSound(): void;
    
    move(): void {
        console.log("Moving...");
    }
}

// Implementation
class Duck extends Bird implements Flyable, Swimmable {
    altitude: number = 0;
    
    fly(): void {
        this.altitude = 100;
        console.log("Flying!");
    }
    
    swim(): void {
        console.log("Swimming!");
    }
    
    makeSound(): void {
        console.log("Quack!");
    }
}
```

#### C#

```csharp
// Interface
public interface IFlyable
{
    int Altitude { get; set; }
    void Fly();
}

public interface ISwimmable
{
    void Swim();
}

// Abstract class
public abstract class Bird
{
    public abstract void MakeSound();
    
    public virtual void Move()
    {
        Console.WriteLine("Moving...");
    }
}

// Implementation
public class Duck : Bird, IFlyable, ISwimmable
{
    public int Altitude { get; set; }
    
    public void Fly()
    {
        Altitude = 100;
        Console.WriteLine("Flying!");
    }
    
    public void Swim()
    {
        Console.WriteLine("Swimming!");
    }
    
    public override void MakeSound()
    {
        Console.WriteLine("Quack!");
    }
}
```

#### Python

```python
from abc import ABC, abstractmethod

# Abstract base class (similar to interface)
class Flyable(ABC):
    @abstractmethod
    def fly(self):
        pass

class Swimmable(ABC):
    @abstractmethod
    def swim(self):
        pass

# Abstract class with concrete methods
class Bird(ABC):
    @abstractmethod
    def make_sound(self):
        pass
    
    def move(self):
        print("Moving...")

# Implementation
class Duck(Bird, Flyable, Swimmable):
    def __init__(self):
        self.altitude = 0
    
    def fly(self):
        self.altitude = 100
        print("Flying!")
    
    def swim(self):
        print("Swimming!")
    
    def make_sound(self):
        print("Quack!")
```

:::


## Key Differences Summary

| Feature | TypeScript | C# | Python |
|---------|------------|-----|---------|
| **Constructor** | `constructor()` | Same name as class | `__init__()` |
| **Instance Reference** | `this` | `this` | `self` (explicit) |
| **Static Keyword** | `static` | `static` | `@classmethod`/`@staticmethod` |
| **Private Members** | `private` keyword | `private` keyword | `__name` (name mangling) |
| **Protected Members** | `protected` keyword | `protected` keyword | `_name` (convention) |
| **Inheritance** | `extends` | `:` | `class Child(Parent)` |
| **Interface** | `interface` + `implements` | `interface` + `:` | ABC (abstract base class) |
| **Abstract Class** | `abstract` keyword | `abstract` keyword | `ABC` + `@abstractmethod` |
| **Method Override** | No keyword needed | `override` keyword | No keyword needed |
| **Multiple Inheritance** | No (interfaces only) | No (interfaces only) | Yes |
| **Access Default** | public | private | public |

## Practical Example: Complete Class Hierarchy

Here's a practical example combining all concepts:

```
         ┌────────────────┐
         │   IStorable    │ (Interface)
         └────────┬───────┘
                  │
    ┌─────────────┼─────────────┐
    │                            │
┌───▼─────┐              ┌──────▼──────┐
│Document │              │  Database   │
│(Abstract)              │  (Concrete) │
└───┬─────┘              └─────────────┘
    │
    ├──────────┬────────────┐
    │          │            │
┌───▼───┐  ┌──▼───┐  ┌────▼────┐
│  PDF  │  │ Word │  │Spreadsheet│
└───────┘  └──────┘  └──────────┘
```

This hierarchy shows how interfaces, abstract classes, and concrete implementations work together across all three languages.

